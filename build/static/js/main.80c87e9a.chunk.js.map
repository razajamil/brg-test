{"version":3,"sources":["helpers.js","redux/actions/apiActions.js","redux/actions/entityActions.js","api/api_config.js","entities/artists.js","api/artistsAPI.js","entities/index.js","redux/reducers/entityReducers.js","redux/reducers/index.js","redux/actions/entityAPIResultActions.js","redux/sagas/apiSaga.js","redux/sagas/index.js","redux/store/index.js","hooks/artists/useArtists.js","components/SearchBar/searchBar.js","components/TopArtists/artistCard.js","components/TopArtists/topArtists.js","components/ArtistTracks/artistTracks.js","App.js","serviceWorker.js","index.js"],"names":["arrayHasValue","arr","undefined","Array","isArray","length","objectHasValue","obj","Object","keys","stringHasValue","str","mapObject","fn","map","key","idx","prototype","toString","call","isFunction","toAPIActionType","type","isAPIAction","action","startsWith","toEntityAction","entityID","toUpperCase","meta","entityActionType","entityActionParams","payload","toEntityAPIAction","entityAction","isEntityAPIAction","artists","id","initialState","top_artists","get_top_artists_request","country","current_page","results_per_page","max_pages","get_top_artists_api_status","loading","success","error","artist_top_tracks","get_artist_top_tracks_api_status","getTopArtists","apiCall","page","resultsPerPage","Axios","get","api_config","reducer","state","data","topartists","artist","isNaN","request_info","parseInt","perPage","totalPages","getArtistTopTracks","artistID","artistName","toptracks","track","name","tracks","topArtistsSelector","artistTopTracksSelector","entities","createEntityReducers","reducers","entity","entityActionTypeResult","produce","draft","returnState","entityActionTypeResultShare","share","shareAction","params","rootReducer","combineReducers","getEntityAPILoadingAction","actionGenerator","returnAction","toEntityAPIResultLoadingAction","getEntityAPISuccessAction","toEntityAPIResultSuccessAction","getEntityAPIFailAction","toEntityAPIResultFailAction","getEntityAPIActionAPICall","processAPIAction","watchForAPIAction","isAPIActionUnderway","put","apiResponse","successActions","all","successAction","failAction","console","log","endAPIAction","takeEvery","window","apiSagaVars","hash","isUnderway","rootSaga","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","useArtists","dispatch","useDispatch","useSelector","get_top_artists","artistsEntity","get_artist_top_tracks","useStyles","makeStyles","theme","root","padding","display","alignItems","width","homeIcon","cursor","input","marginLeft","spacing","flex","iconButton","HomeIcon","props","SvgIcon","d","SearchBar","useState","setCountry","history","useHistory","useEffect","classes","LinearProgress","Paper","component","className","color","title","onClick","push","InputBase","placeholder","inputProps","value","onChange","event","target","onKeyPress","IconButton","aria-label","maxWidth","media","height","paddingTop","expand","transform","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","ArtistCard","Card","CardHeader","subheader","listeners","CardMedia","image","mbid","CardContent","Typography","variant","Link","href","url","flexGrow","inline","paginationContainer","marginTop","marginBottom","justifyContent","TopArtists","useParams","page_int","style","Grid","container","justify","slice","item","lg","md","sm","xs","Pagination","shape","count","boundaryCount","Button","size","goBack","demo","palette","background","paper","margin","ArtistTracks","float","List","ListItem","ListItemIcon","ListItemText","primary","secondary","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.80c87e9a.chunk.js","sourcesContent":["export const arrayHasValue = arr =>\r\n  arr !== undefined && arr !== null && Array.isArray(arr) && arr.length > 0\r\n\r\nexport const objectHasValue = obj =>\r\n  obj !== null && obj !== undefined && Object.keys(obj).length > 0\r\n\r\nexport const stringHasValue = str =>\r\n  str !== null && str !== undefined && str !== ''\r\n\r\nexport const isFunction = fn => {\r\n  return Object.prototype.toString.call(fn) === '[object Function]'\r\n}\r\n\r\nexport const mapObject = (obj, fn) =>\r\n  Object.keys(obj).map((key, idx) =>\r\n    isFunction(fn) ? fn(obj[key], idx) : obj[key]\r\n  )\r\n","import { objectHasValue } from '../../helpers'\r\n\r\nconst API_ACTION = 'api/'\r\nconst API_ACTION_LOADING = 'api_l/'\r\nconst API_ACTION_SUCCESS = 'api_s/'\r\nconst API_ACTION_FAIL = 'api_f/'\r\n\r\nexport const toAPIActionType = type => API_ACTION + type\r\nexport const toAPIActionLoadingType = type => API_ACTION_LOADING + type\r\nexport const toAPIActionSuccessType = type => API_ACTION_SUCCESS + type\r\nexport const toAPIActionFailType = type => API_ACTION_FAIL + type\r\n\r\nexport const isAPIAction = action =>\r\n  objectHasValue(action) && action.type.startsWith(API_ACTION)\r\n\r\nexport const isAPILoadingAction = action =>\r\n  isAPIAction(action) && action.meta.entityActionResult === 'loading'\r\n\r\nexport const isAPISuccessAction = action =>\r\n  isAPIAction(action) && action.meta.entityActionResult === 'success'\r\n\r\nexport const isAPIFailAction = action =>\r\n  isAPIAction(action) && action.meta.entityActionResult === 'error'\r\n\r\nexport const toAPIAction = action => ({\r\n  ...action,\r\n  type: toAPIActionType(action.type)\r\n})\r\n","// Functions to create secular sync/async-loading/success/fail entity actions objects\r\n\r\n// WARNING: No dependancies except for ./api, if you introduce dependancies here it might lead to circular dependancy issues\r\n\r\nimport { objectHasValue, stringHasValue } from '../../helpers'\r\nimport {\r\n  toAPIActionType,\r\n  toAPIActionSuccessType,\r\n  toAPIActionLoadingType,\r\n  toAPIActionFailType\r\n} from './apiActions'\r\n\r\nexport const ENTITY_ACTION_RESULT_LOADING = 'loading'\r\nexport const ENTITY_ACTION_RESULT_SUCCESS = 'success'\r\nexport const ENTITY_ACTION_RESULT_FAIL = 'error'\r\n\r\nexport const toEntityAction = (action, entityID) => {\r\n  return {\r\n    ...action,\r\n    type: `${action.type}/${entityID.toUpperCase()}`,\r\n    meta: {\r\n      ...action.meta,\r\n      entityID: entityID,\r\n      entityActionType: action.type,\r\n      entityActionParams: {\r\n        ...(action.meta ? action.meta.entityActionParams : {}),\r\n        ...action.payload\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const toEntityAPIAction = (action, entityID) => {\r\n  const entityAction = toEntityAction(action, entityID)\r\n  const entityAPIAction = {\r\n    ...entityAction,\r\n    type: toAPIActionType(entityAction.type)\r\n  }\r\n  return entityAPIAction\r\n}\r\n\r\nexport const toEntityAPIResultLoadingAction = action => {\r\n  if (!stringHasValue(action.type)) action.type = action.meta.entityActionType\r\n  let returnAction = toEntityAction(action, action.meta.entityID)\r\n\r\n  returnAction.type = toAPIActionLoadingType(returnAction.type)\r\n  returnAction.meta.entityActionTypeResult = ENTITY_ACTION_RESULT_LOADING\r\n\r\n  return returnAction\r\n}\r\n\r\nexport const toEntityAPIResultSuccessAction = action => {\r\n  if (!stringHasValue(action.type)) action.type = action.meta.entityActionType\r\n  let returnAction = toEntityAction(action, action.meta.entityID)\r\n\r\n  returnAction.type = toAPIActionSuccessType(returnAction.type)\r\n  returnAction.meta.entityActionTypeResult = ENTITY_ACTION_RESULT_SUCCESS\r\n\r\n  return returnAction\r\n}\r\n\r\nexport const toEntityAPIResultFailAction = action => {\r\n  if (!stringHasValue(action.type)) action.type = action.meta.entityActionType\r\n  let returnAction = toEntityAction(action, action.meta.entityID)\r\n\r\n  returnAction.type = toAPIActionFailType(returnAction.type)\r\n  returnAction.meta.entityActionTypeResult = ENTITY_ACTION_RESULT_FAIL\r\n\r\n  return returnAction\r\n}\r\n\r\nexport const isEntityAPIAction = action => {\r\n  return (\r\n    objectHasValue(action) &&\r\n    objectHasValue(action.meta) &&\r\n    action.meta.entityActionType\r\n  )\r\n}\r\n\r\nexport const isEntityAPIActionResult = action =>\r\n  objectHasValue(action) &&\r\n  objectHasValue(action.meta) &&\r\n  stringHasValue(action.meta.entityActionTypeResult)\r\n","export default {\r\n  api_key: '99bb380ae104af01967cd3e835c98652',\r\n  shared_secret: '35143e91700ef24af91f4f433aa70bde'\r\n}\r\n","import { toEntityAPIAction } from '../redux/actions/entityActions'\r\nimport { getTopArtistsByCountry, getArtistTopTracks } from '../api/artistsAPI'\r\nimport { objectHasValue, arrayHasValue, stringHasValue } from '../helpers'\r\n\r\nexport const ARTISTS = 'artists'\r\n\r\nconst artists = {\r\n  id: ARTISTS,\r\n  initialState: {\r\n    top_artists: {},\r\n    get_top_artists_request: {\r\n      country: '',\r\n      current_page: 0,\r\n      results_per_page: 0,\r\n      max_pages: 0\r\n    },\r\n    get_top_artists_api_status: {\r\n      loading: false,\r\n      success: false,\r\n      error: ''\r\n    },\r\n\r\n    artist_top_tracks: {},\r\n\r\n    get_artist_top_tracks_api_status: {\r\n      loading: false,\r\n      success: false,\r\n      error: ''\r\n    }\r\n  },\r\n  getTopArtists: {\r\n    apiCall: getTopArtistsByCountry,\r\n    action: ({ country, page, resultsPerPage }) =>\r\n      toEntityAPIAction(\r\n        {\r\n          payload: { country, page, resultsPerPage },\r\n          type: 'getTopArtists'\r\n        },\r\n        ARTISTS\r\n      ),\r\n    loading: {\r\n      reducer: (state, action) => {\r\n        const { country, page, resultsPerPage } = action.payload\r\n\r\n        state.top_artists = {}\r\n        state.get_top_artists_api_status = {\r\n          loading: true,\r\n          success: false,\r\n          error: ''\r\n        }\r\n        state.get_top_artists_request = {\r\n          country: country,\r\n          current_page: page,\r\n          results_per_page: resultsPerPage,\r\n          max_pages: -1\r\n        }\r\n      }\r\n    },\r\n    success: {\r\n      reducer: (state, action) => {\r\n        const { payload } = action\r\n        const { entityActionParams } = action.meta\r\n\r\n        if (\r\n          objectHasValue(payload) &&\r\n          objectHasValue(payload.data) &&\r\n          objectHasValue(payload.data.topartists) &&\r\n          arrayHasValue(payload.data.topartists.artist) &&\r\n          objectHasValue(entityActionParams) &&\r\n          !isNaN(entityActionParams.page)\r\n        ) {\r\n          const request_info = payload.data.topartists['@attr']\r\n\r\n          state.top_artists = [...payload.data.topartists.artist]\r\n          state.get_top_artists_request = {\r\n            country: request_info.country,\r\n            current_page: parseInt(request_info.page),\r\n            results_per_page: parseInt(request_info.perPage),\r\n            max_pages: parseInt(request_info.totalPages)\r\n          }\r\n        }\r\n\r\n        state.get_top_artists_api_status = {\r\n          loading: false,\r\n          success: true,\r\n          error: ''\r\n        }\r\n      }\r\n    },\r\n    error: {\r\n      reducer: (state, action) => {\r\n        state.get_top_artists_api_status = {\r\n          loading: false,\r\n          success: false,\r\n          error: 'api error'\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  getArtistTopTracks: {\r\n    apiCall: getArtistTopTracks,\r\n    action: ({ artistID, artistName }) =>\r\n      toEntityAPIAction(\r\n        {\r\n          payload: { artistID, artistName },\r\n          type: 'getArtistTopTracks'\r\n        },\r\n        ARTISTS\r\n      ),\r\n    loading: {\r\n      reducer: (state, action) => {\r\n        const { artistID, artistName } = action.payload\r\n\r\n        state.artist_top_tracks = {}\r\n\r\n        state.get_artist_top_tracks_api_status = {\r\n          loading: true,\r\n          success: false,\r\n          error: ''\r\n        }\r\n      }\r\n    },\r\n    success: {\r\n      reducer: (state, action) => {\r\n        const { payload } = action\r\n        const { entityActionParams } = action.meta\r\n\r\n        if (\r\n          objectHasValue(payload) &&\r\n          objectHasValue(payload.data) &&\r\n          objectHasValue(payload.data.toptracks) &&\r\n          arrayHasValue(payload.data.toptracks.track) &&\r\n          objectHasValue(entityActionParams)\r\n        ) {\r\n          state.artist_top_tracks = {\r\n            name: payload.data.toptracks.track[0].artist.name,\r\n            tracks: [...payload.data.toptracks.track]\r\n          }\r\n        }\r\n        state.get_artist_top_tracks_api_status = {\r\n          loading: false,\r\n          success: true,\r\n          error: ''\r\n        }\r\n      }\r\n    },\r\n    error: {\r\n      reducer: (state, action) => {\r\n        state.artist_top_tracks = {}\r\n        state.get_artist_top_tracks_api_status = {\r\n          loading: false,\r\n          success: false,\r\n          error: 'api error'\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default artists\r\n\r\nexport const topArtistsSelector = state => {\r\n  return {\r\n    top_artists: state[ARTISTS].top_artists,\r\n    get_top_artists_request: state[ARTISTS].get_top_artists_request,\r\n    get_top_artists_api_status: state[ARTISTS].get_top_artists_api_status\r\n  }\r\n}\r\n\r\nexport const artistTopTracksSelector = state => {\r\n  return {\r\n    artist_top_tracks: state[ARTISTS].artist_top_tracks,\r\n    get_artist_top_tracks_api_status:\r\n      state[ARTISTS].get_artist_top_tracks_api_status\r\n  }\r\n}\r\n","import Axios from 'axios'\r\nimport api_config from './api_config'\r\n\r\nconst responseFormat = 'json'\r\n\r\nexport const getTopArtistsByCountry = ({ country, page, resultsPerPage }) => {\r\n  return Axios.get(\r\n    `https://ws.audioscrobbler.com/2.0/?method=geo.gettopartists&api_key=${api_config.api_key}&country=${country}&page=${page}&limit=${resultsPerPage}&format=${responseFormat}`\r\n  )\r\n}\r\n\r\nexport const getArtistTopTracks = ({ artistID }) => {\r\n  return Axios.get(\r\n    `https://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&mbid=${artistID}&page=1&limit=5&api_key=${api_config.api_key}&format=${responseFormat}`\r\n  )\r\n}\r\n","import artists, { ARTISTS } from './artists'\r\n\r\nlet entities = {}\r\n\r\nentities[ARTISTS] = artists\r\n\r\nexport default entities\r\n","import { produce } from 'immer'\r\nimport entities from '../../entities'\r\nimport { mapObject, stringHasValue, arrayHasValue } from '../../helpers'\r\n\r\nconst createEntityReducers = () => {\r\n  const reducers = {}\r\n\r\n  mapObject(entities, entity => {\r\n    reducers[entity.id] = (state = entity.initialState, action) => {\r\n      // api action result\r\n      if (\r\n        action.meta &&\r\n        stringHasValue(action.meta.entityID) &&\r\n        action.meta.entityID === entity.id &&\r\n        stringHasValue(action.meta.entityActionType) &&\r\n        stringHasValue(action.meta.entityActionTypeResult)\r\n      ) {\r\n        if (stringHasValue(action.meta.entityActionTypeResult)) {\r\n          const { reducer } = entity[action.meta.entityActionType][\r\n            action.meta.entityActionTypeResult\r\n          ]\r\n          return produce(state, draft => reducer(draft, action))\r\n        }\r\n      }\r\n\r\n      // normal action\r\n      if (\r\n        action.meta &&\r\n        action.meta.entityID === entity.id &&\r\n        stringHasValue(action.meta.entityActionType) &&\r\n        !stringHasValue(action.meta.entityActionTypeResult)\r\n      ) {\r\n        let returnState = state\r\n\r\n        const { reducer } = entity[action.meta.entityActionType]\r\n        if (reducer) {\r\n          returnState = produce(state, draft => reducer(draft, action))\r\n        }\r\n\r\n        return returnState\r\n      }\r\n\r\n      // shared action\r\n      if (\r\n        action.meta &&\r\n        arrayHasValue(action.meta.entityActionTypeResultShare)\r\n      ) {\r\n        let returnState = state\r\n\r\n        action.meta.entityActionTypeResultShare.map(share => {\r\n          if (share.entityID === entity.id) {\r\n            const { action: shareAction, reducer } = entities[share.entityID][\r\n              share.action\r\n            ]\r\n\r\n            if (reducer) {\r\n              returnState = produce(state, draft =>\r\n                reducer(draft, shareAction(share.params))\r\n              )\r\n            }\r\n          }\r\n        })\r\n\r\n        return returnState\r\n      }\r\n\r\n      return state\r\n    }\r\n  })\r\n\r\n  return reducers\r\n}\r\n\r\nexport default createEntityReducers\r\n","import { combineReducers } from 'redux'\r\nimport createEntityReducers from './entityReducers'\r\n\r\nexport const rootReducer = combineReducers({\r\n  ...createEntityReducers()\r\n})\r\n","// Functions to generate resulting actions from api actions i.e loading/success/tasks\r\n\r\n// Tries to look for action object on entity/api_action/loading-success-fail/action\r\n\r\n// If not available, returns a default loading/success/fail action object that just copies payload\r\n// and meta and changes the result type\r\n\r\nimport {\r\n  toEntityAPIResultLoadingAction,\r\n  toEntityAPIResultSuccessAction,\r\n  toEntityAPIResultFailAction\r\n} from './entityActions'\r\n\r\nimport entities from '../../entities'\r\n\r\nexport const ENTITY_ACTION_RESULT_LOADING = 'loading'\r\nexport const ENTITY_ACTION_RESULT_SUCCESS = 'success'\r\nexport const ENTITY_ACTION_RESULT_FAIL = 'error'\r\n\r\nexport const getEntityAPILoadingAction = (payload, meta) => {\r\n  let action = {}\r\n\r\n  const actionGenerator =\r\n    entities[meta.entityID][meta.entityActionType][ENTITY_ACTION_RESULT_LOADING]\r\n      .action\r\n\r\n  if (actionGenerator) {\r\n    action = actionGenerator(payload, meta)\r\n    action.meta.entityActionTypeResult = ENTITY_ACTION_RESULT_LOADING\r\n  } else {\r\n    action = toEntityAPIResultLoadingAction({ payload, meta })\r\n  }\r\n\r\n  return action\r\n}\r\n\r\nexport const getEntityAPISuccessAction = (payload, meta) => {\r\n  let action = {}\r\n\r\n  const actionGenerator =\r\n    entities[meta.entityID][meta.entityActionType][ENTITY_ACTION_RESULT_SUCCESS]\r\n      .action\r\n\r\n  if (actionGenerator) {\r\n    action = actionGenerator(payload, meta)\r\n    action.meta.entityActionTypeResult = ENTITY_ACTION_RESULT_SUCCESS\r\n  } else {\r\n    action = toEntityAPIResultSuccessAction({ payload, meta })\r\n  }\r\n\r\n  return [action]\r\n}\r\n\r\nexport const getEntityAPIFailAction = (payload, meta) => {\r\n  let action = {}\r\n  const actionGenerator =\r\n    entities[meta.entityID][meta.entityActionType][ENTITY_ACTION_RESULT_FAIL]\r\n      .action\r\n\r\n  if (actionGenerator) {\r\n    action = actionGenerator(payload, meta)\r\n    action.meta.entityActionTypeResult = ENTITY_ACTION_RESULT_FAIL\r\n  } else {\r\n    action = toEntityAPIResultFailAction({ payload, meta })\r\n  }\r\n\r\n  return action\r\n}\r\n\r\nexport const getEntityAPIActionAPICall = (payload, meta) => {\r\n  return () =>\r\n    entities[meta.entityID][meta.entityActionType].apiCall(\r\n      meta.entityActionParams\r\n    )\r\n}\r\n","import { put, takeEvery, all } from 'redux-saga/effects'\r\nimport { isEntityAPIAction } from '../actions/entityActions'\r\nimport {\r\n  getEntityAPIActionAPICall,\r\n  getEntityAPILoadingAction,\r\n  getEntityAPISuccessAction,\r\n  getEntityAPIFailAction\r\n} from '../actions/entityAPIResultActions'\r\nimport { isAPIAction } from '../actions/apiActions'\r\n\r\nimport { objectHasValue, stringHasValue } from '../../helpers'\r\n\r\nwindow.apiSagaVars = {}\r\n\r\nexport function* processAPIAction(action) {\r\n  try {\r\n    if (isEntityAPIAction(action) && !isAPIActionUnderway(action)) {\r\n      try {\r\n        yield put(getEntityAPILoadingAction(action.payload, action.meta))\r\n        const apiCall = getEntityAPIActionAPICall(action.payload, action.meta)\r\n        const apiResponse = yield apiCall()\r\n        if (objectHasValue(apiResponse)) {\r\n          const successActions = getEntityAPISuccessAction(\r\n            apiResponse,\r\n            action.meta\r\n          )\r\n          yield all(successActions.map(successAction => put(successAction)))\r\n        } else {\r\n          const failAction = getEntityAPIFailAction(apiResponse, action.meta)\r\n          console.log(failAction)\r\n          yield put(failAction)\r\n        }\r\n      } catch (err) {\r\n        const css = 'color:red'\r\n        console.log('%c%s', css, err)\r\n        // const failAction = getEntityAPIFailAction(err, action.meta)\r\n        // yield put(failAction)\r\n      }\r\n      endAPIAction(action)\r\n    }\r\n  } catch (err) {\r\n    console.log('%c%s', 'API SAGA: unknown error')\r\n  }\r\n}\r\n\r\nexport function* watchForAPIAction() {\r\n  yield takeEvery(isAPIAction, processAPIAction)\r\n}\r\n\r\nconst isAPIActionUnderway = action => {\r\n  const { meta } = action\r\n  let hash = meta.entityID\r\n\r\n  Object.keys(meta.entityActionParams).map(key => {\r\n    hash += key + meta.entityActionParams[key]\r\n  })\r\n\r\n  const isUnderway = stringHasValue(window.apiSagaVars[hash])\r\n\r\n  if (!isUnderway) {\r\n    window.apiSagaVars[hash] = '1'\r\n  }\r\n\r\n  return isUnderway\r\n}\r\n\r\nconst endAPIAction = action => {\r\n  const { meta } = action\r\n  let hash = meta.entityID\r\n\r\n  Object.keys(meta.entityActionParams).map(key => {\r\n    hash += key + meta.entityActionParams[key]\r\n  })\r\n\r\n  delete window.apiSagaVars[hash]\r\n}\r\n","import { all } from 'redux-saga/effects'\nimport { watchForAPIAction } from './apiSaga'\n\n// single entry point to start all Sagas at once\nexport default function* rootSaga() {\n  yield all([watchForAPIAction()])\n}\n","import { createStore, applyMiddleware } from 'redux'\r\n\r\nimport { compose } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { rootReducer } from '../reducers'\r\nimport rootSaga from '../sagas'\r\n\r\nconst composeEnhancers =\r\n  (typeof window !== 'undefined' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\r\n  compose\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nlet store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(sagaMiddleware))\r\n)\r\n\r\nwindow.store = store\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\nexport default store\r\n","import { useDispatch, useSelector } from 'react-redux'\r\nimport artistsEntity, {\r\n  topArtistsSelector,\r\n  artistTopTracksSelector\r\n} from '../../entities/artists'\r\nimport { stringHasValue } from '../../helpers'\r\n\r\nconst useArtists = () => {\r\n  const dispatch = useDispatch()\r\n  const {\r\n    top_artists,\r\n    get_top_artists_request,\r\n    get_top_artists_api_status\r\n  } = useSelector(topArtistsSelector)\r\n\r\n  const { artist_top_tracks, get_artist_top_tracks_api_status } = useSelector(\r\n    artistTopTracksSelector\r\n  )\r\n\r\n  const getTopArtists = ({ country, page, resultsPerPage }) => {\r\n    dispatch(\r\n      artistsEntity.getTopArtists.action({ country, page, resultsPerPage })\r\n    )\r\n  }\r\n\r\n  const getArtistTopTracks = ({ artistID }) => {\r\n    if (stringHasValue(artistID))\r\n      dispatch(artistsEntity.getArtistTopTracks.action({ artistID }))\r\n  }\r\n\r\n  return {\r\n    top_artists,\r\n    get_top_artists_request,\r\n    get_top_artists: getTopArtists,\r\n    get_top_artists_api_status,\r\n    get_artist_top_tracks: getArtistTopTracks,\r\n    get_artist_top_tracks_api_status,\r\n    artist_top_tracks\r\n  }\r\n}\r\n\r\nexport default useArtists\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport {\r\n  makeStyles,\r\n  Paper,\r\n  InputBase,\r\n  IconButton,\r\n  LinearProgress,\r\n  Button,\r\n  SvgIcon\r\n} from '@material-ui/core'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport useArtists from '../../hooks/artists/useArtists'\r\nimport { stringHasValue } from '../../helpers'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    padding: '2px 4px',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    width: '100%'\r\n  },\r\n  homeIcon: {\r\n    cursor: 'pointer'\r\n  },\r\n  input: {\r\n    marginLeft: theme.spacing(1),\r\n    flex: 1\r\n  },\r\n  iconButton: {\r\n    padding: 10\r\n  }\r\n}))\r\n\r\nfunction HomeIcon(props) {\r\n  return (\r\n    <SvgIcon {...props}>\r\n      <path d='M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z' />\r\n    </SvgIcon>\r\n  )\r\n}\r\n\r\nconst SearchBar = () => {\r\n  const {\r\n    get_top_artists_request,\r\n    get_top_artists_api_status,\r\n    get_artist_top_tracks_api_status\r\n  } = useArtists()\r\n\r\n  const [country, setCountry] = useState('')\r\n\r\n  let history = useHistory()\r\n\r\n  const handleHomeClick = () => {\r\n    history.push('/')\r\n    setCountry('')\r\n  }\r\n  const handleTextChange = event => {\r\n    setCountry(event.target.value)\r\n  }\r\n\r\n  const handleSearchClick = () => {\r\n    history.push(`/topartists/${country}/1`)\r\n  }\r\n\r\n  const handleKeypress = event => {\r\n    if (event.key === 'Enter') {\r\n      history.push(`/topartists/${country}/1`)\r\n    }\r\n  }\r\n\r\n  // on page reload get country from url\r\n  useEffect(() => {\r\n    if (!stringHasValue(country)) setCountry(get_top_artists_request.country)\r\n  }, [get_top_artists_request.country])\r\n\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <>\r\n      {(get_top_artists_api_status.loading ||\r\n        get_artist_top_tracks_api_status.loading) && <LinearProgress />}\r\n      <Paper component='div' className={classes.root}>\r\n        <HomeIcon\r\n          color='inherit'\r\n          className={classes.homeIcon}\r\n          title='Home'\r\n          onClick={handleHomeClick}\r\n        />\r\n        <InputBase\r\n          className={classes.input}\r\n          placeholder='Find artists by country'\r\n          inputProps={{ 'aria-label': 'country' }}\r\n          value={country}\r\n          onChange={handleTextChange}\r\n          onKeyPress={handleKeypress}\r\n        />\r\n        <IconButton\r\n          type='submit'\r\n          className={classes.iconButton}\r\n          aria-label='search'\r\n          onClick={handleSearchClick}\r\n        >\r\n          <SearchIcon />\r\n        </IconButton>\r\n      </Paper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SearchBar\r\n","import React from 'react'\r\nimport { makeStyles, Link } from '@material-ui/core'\r\nimport { objectHasValue, stringHasValue } from '../../helpers'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport clsx from 'clsx'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { red } from '@material-ui/core/colors'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    maxWidth: 345\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: '56.25%', // 16:9\r\n    cursor: 'pointer'\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest\r\n    })\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)'\r\n  },\r\n  avatar: {\r\n    backgroundColor: red[500]\r\n  }\r\n}))\r\n\r\nconst ArtistCard = ({ artist }) => {\r\n  const history = useHistory()\r\n\r\n  const handleArtistClick = () => {\r\n    if (objectHasValue(artist) && stringHasValue(artist.mbid))\r\n      history.push(`/artist/${artist.mbid}`)\r\n  }\r\n\r\n  const classes = useStyles()\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        title={artist.name}\r\n        subheader={`${artist.listeners} listeners`}\r\n      />\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={artist.image[3]['#text']}\r\n        title='View tracks'\r\n        onClick={handleArtistClick}\r\n      />\r\n      <CardContent>\r\n        <Typography variant='body2' color='textSecondary' component='p'>\r\n          <Link target='_blank' href={artist.url}>\r\n            View on Last.fm\r\n          </Link>\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ArtistCard\r\n","import React, { useEffect } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\n\r\nimport useArtists from '../../hooks/artists/useArtists'\r\nimport { arrayHasValue, stringHasValue } from '../../helpers'\r\nimport { makeStyles, Typography, Button, Grid } from '@material-ui/core'\r\nimport Pagination from '@material-ui/lab/Pagination'\r\nimport ArtistCard from './artistCard'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  inline: {\r\n    display: 'inline'\r\n  },\r\n  paginationContainer: {\r\n    marginTop: 40,\r\n    marginBottom: 40,\r\n    '& ul.MuiPagination-ul': {\r\n      justifyContent: 'center'\r\n    }\r\n  },\r\n  avatar: {\r\n    cursor: 'pointer'\r\n  }\r\n}))\r\n\r\nconst TopArtists = () => {\r\n  const {\r\n    top_artists,\r\n    get_top_artists,\r\n    get_top_artists_request,\r\n    get_top_artists_api_status\r\n  } = useArtists()\r\n  const { country, page } = useParams()\r\n  const history = useHistory()\r\n\r\n  const onPageClick = (event, page) => {\r\n    if (stringHasValue(country) && page > 0) {\r\n      history.push(`/topartists/${country}/${page}`)\r\n    }\r\n  }\r\n\r\n  const handleBackClick = () => {\r\n    history.goBack()\r\n  }\r\n\r\n  useEffect(() => {\r\n    let page_int = parseInt(page)\r\n    if (stringHasValue(country) && page_int > 0) {\r\n      get_top_artists({ country, page: page_int, resultsPerPage: 5 })\r\n    }\r\n  }, [country, page])\r\n\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div style={{ marginTop: '20px' }}>\r\n      {arrayHasValue(top_artists) && !get_top_artists_api_status.loading && (\r\n        <Grid container spacing={2} justify='center' className={classes.root}>\r\n          {top_artists.slice(0, 5).map(artist => (\r\n            <Grid item lg={3} md={4} sm={6} xs={12}>\r\n              <ArtistCard artist={artist} />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      )}\r\n\r\n      {arrayHasValue(top_artists) && !get_top_artists_api_status.loading && (\r\n        <Pagination\r\n          className={classes.paginationContainer}\r\n          variant='outlined'\r\n          shape='rounded'\r\n          count={parseInt(get_top_artists_request.max_pages)}\r\n          page={parseInt(page)}\r\n          boundaryCount={3}\r\n          onChange={onPageClick}\r\n        />\r\n      )}\r\n\r\n      {!arrayHasValue(top_artists) && get_top_artists_api_status.success && (\r\n        <>\r\n          <Typography>No results found, please try again</Typography>\r\n          {history.length > 2 && (\r\n            <Button\r\n              variant='outlined'\r\n              size='small'\r\n              style={{ marginTop: 10 }}\r\n              onClick={handleBackClick}\r\n            >\r\n              Back\r\n            </Button>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TopArtists\r\n","import React, { useEffect } from 'react'\r\nimport useArtists from '../../hooks/artists/useArtists'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { objectHasValue } from '../../helpers'\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  makeStyles,\r\n  ListItemText,\r\n  Button\r\n} from '@material-ui/core'\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    maxWidth: 752\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  title: {\r\n    margin: theme.spacing(4, 0, 2)\r\n  },\r\n  paginationContainer: {\r\n    marginTop: 20\r\n  }\r\n}))\r\n\r\nconst ArtistTracks = () => {\r\n  const { artist_top_tracks, get_artist_top_tracks } = useArtists()\r\n\r\n  const { artistID } = useParams()\r\n\r\n  const history = useHistory()\r\n\r\n  const handleBackClick = () => {\r\n    history.goBack()\r\n  }\r\n\r\n  useEffect(() => {\r\n    get_artist_top_tracks({ artistID })\r\n  }, [artistID])\r\n\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div>\r\n      {objectHasValue(artist_top_tracks) && (\r\n        <>\r\n          <Grid item xs={12}>\r\n            <Typography variant='h6' className={classes.title}>\r\n              <Button\r\n                variant='outlined'\r\n                size='small'\r\n                style={{ float: 'left' }}\r\n                onClick={handleBackClick}\r\n              >\r\n                Back\r\n              </Button>\r\n              {artist_top_tracks.name}\r\n            </Typography>\r\n            <div className={classes.demo}>\r\n              <List>\r\n                {artist_top_tracks.tracks.map(track => (\r\n                  <ListItem key={track.mbid}>\r\n                    <ListItemIcon>\r\n                      <MusicNoteIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                      primary={track.name}\r\n                      secondary={`${track.listeners} listeners`}\r\n                    />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </div>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ArtistTracks\r\n","import React from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport store from './redux/store'\r\nimport './reset.scss'\r\nimport './App.scss'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport SearchBar from './components/SearchBar/searchBar'\r\nimport TopArtists from './components/TopArtists/topArtists'\r\nimport ArtistTracks from './components/ArtistTracks/artistTracks'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className='App'>\r\n      <SearchBar />\r\n      <Switch>\r\n        <Route exact path='/artist/:artistID'>\r\n          <ArtistTracks />\r\n        </Route>\r\n        <Route exact path='/topartists/:country/:page'>\r\n          <TopArtists />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType !== null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister()\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}